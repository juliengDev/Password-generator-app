{"version":3,"file":"index-kqgeNyXn.js","sources":["../../src/slider.ts","../../src/main.ts"],"sourcesContent":["const slider = document.getElementById(\n  \"char-length-slider\"\n) as HTMLInputElement | null;\nconst sliderValue = document.getElementById(\n  \"slider-value\"\n) as HTMLElement | null;\n\nfunction updateSlider(): void {\n  if (!slider || !sliderValue) return;\n\n  const value: number = parseInt(slider.value, 10);\n  const min: number = parseInt(slider.min, 10);\n  const max: number = parseInt(slider.max, 10);\n  const percentage: number = ((value - min) / (max - min)) * 100;\n\n  slider.style.background = `linear-gradient(to right, var(--color-neonGreen) ${percentage}%, var(--color-veryDarkGrey) ${percentage}%)`;\n  sliderValue.textContent = value.toString();\n}\n\nif (slider) {\n  slider.addEventListener(\"input\", updateSlider);\n  updateSlider();\n}\n","import \"../css/style.css\";\nimport \"./slider\";\nconst uppercaseChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst lowercaseChars = \"abcdefghijklmnopqrstuvwxyz\";\nconst numberChars = \"0123456789\";\nconst symbolChars = \"!@#$%^&*()_+[]{}|;:,.<>?\";\n\n/**\n * Generates a random password based on the specified criteria.\n *\n * @param length The length of the password to generate.\n * @param includeUppercase Whether to include uppercase characters in the password.\n * @param includeLowercase Whether to include lowercase characters in the password.\n * @param includeNumbers Whether to include numbers in the password.\n * @param includeSymbols Whether to include symbols in the password.\n * @returns The randomly generated password.\n */\nfunction generatePassword(\n  length: number,\n  includeUppercase: boolean,\n  includeLowercase: boolean,\n  includeNumbers: boolean,\n  includeSymbols: boolean\n): string {\n  let allChars = \"\";\n  if (includeUppercase) allChars += uppercaseChars;\n  if (includeLowercase) allChars += lowercaseChars;\n  if (includeNumbers) allChars += numberChars;\n  if (includeSymbols) allChars += symbolChars;\n\n  if (allChars === \"\") return \"P4$5W0rD!\"; // Default password if no option is selected\n\n  let password = \"\";\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * allChars.length);\n    password += allChars[randomIndex];\n  }\n\n  return password;\n}\n/**\n * Evaluates the strength of a password based on the following criteria:\n * - At least 12 characters long\n * - Contains at least one uppercase letter\n * - Contains at least one lowercase letter\n * - Contains at least one digit\n * - Contains at least one special character\n *\n * @param password The password to evaluate its strength\n * @returns A string indicating the strength of the password: \"TOO WEAK!\", \"WEAK\", \"MEDIUM\", or \"STRONG\"\n */\nfunction evaluatePasswordStrength(password: string): string {\n  let strength = 0;\n  if (password.length >= 12) strength++;\n  if (/[A-Z]/.test(password)) strength++;\n  if (/[a-z]/.test(password)) strength++;\n  if (/[0-9]/.test(password)) strength++;\n  if (/[^A-Za-z0-9]/.test(password)) strength++;\n\n  if (strength <= 2) return \"TOO WEAK!\";\n  if (strength === 3) return \"WEAK\";\n  if (strength === 4) return \"MEDIUM\";\n  return \"STRONG\";\n}\n/**\n * Updates the strength bars based on the provided strength level.\n *\n * @param strength The strength level to update the bars with.\n * @returns void\n */\nfunction updateStrengthBars(strength: string): void {\n  const strengthText = document.getElementById(\"strength-text\");\n  const bars = document.querySelectorAll<HTMLDivElement>(\".strength-bars .bar\");\n\n  if (strengthText) strengthText.textContent = strength;\n\n  const strengthConfig = {\n    \"TOO WEAK!\": { color: \"var(--color-red)\", filledBars: 1 },\n    WEAK: { color: \"var(--color-orange)\", filledBars: 2 },\n    MEDIUM: { color: \"var(--color-yellow)\", filledBars: 3 },\n    STRONG: { color: \"var(--color-neonGreen)\", filledBars: 4 },\n  };\n\n  const config = strengthConfig[strength] || { color: \"\", filledBars: 0 };\n\n  /**\n   * Updates the strength bars based on the configuration provided.\n   * Iterates over each bar element, removes existing classes, resets background color,\n   * and applies new classes and background color based on the filledBars property of the config object.\n   */\n  bars.forEach((bar, index) => {\n    bar.classList.remove(\"filled\", \"empty\");\n    bar.style.backgroundColor = \"\";\n\n    if (index < config.filledBars) {\n      bar.classList.add(\"filled\");\n      bar.style.backgroundColor = config.color;\n    } else {\n      bar.classList.add(\"empty\");\n    }\n  });\n}\n/**\n * Updates the password display element with the provided password.\n *\n * @param password - The new password to be displayed.\n * @returns void\n */\nfunction updatePasswordOutput(password: string): void {\n  const outputElement = document.getElementById(\"password-display\");\n  if (outputElement) {\n    outputElement.textContent = password;\n  }\n}\n/**\n * Copies the text content of the password display element to the clipboard.\n * Shows a \"COPIED\" message temporarily and then hides it after 2 seconds.\n */\nfunction copyToClipboard(): void {\n  const outputElement = document.getElementById(\"password-display\");\n  if (outputElement) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = outputElement.textContent || \"\";\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n\n    // Show \"COPIED\" message\n    const copiedMessage = document.querySelector(\n      \".password__output-label__copied\"\n    );\n    copiedMessage?.classList.remove(\"hidden\");\n\n    // Remove the message after 2 seconds\n    setTimeout(() => {\n      copiedMessage?.classList.add(\"hidden\");\n    }, 2000);\n  }\n}\n/**\n * Initializes the password generator functionality by setting up event listeners for the character length slider,\n * the generate password button, and the copy password button.\n * Updates the slider value display based on the slider input and generates a password based on the selected options\n * when the generate button is clicked. Also evaluates the password strength and updates the strength bars accordingly.\n * Lastly, allows the user to copy the generated password to the clipboard when the copy button is clicked.\n */\nfunction initializePasswordGenerator(): void {\n  const slider = document.getElementById(\n    \"char-length-slider\"\n  ) as HTMLInputElement | null;\n  const sliderValue = document.getElementById(\"slider-value\");\n  const generateButton = document.getElementById(\"generate-password\");\n  const copyButton = document.getElementById(\"copy-password\");\n\n  if (slider && sliderValue) {\n    slider.addEventListener(\"input\", () => {\n      sliderValue.textContent = slider.value;\n    });\n\n    sliderValue.textContent = slider.value;\n  }\n\n  if (generateButton) {\n    generateButton.addEventListener(\"click\", () => {\n      if (slider) {\n        const length = parseInt(slider.value, 10);\n        const includeUppercase =\n          (document.getElementById(\"include-uppercase\") as HTMLInputElement)\n            ?.checked ?? false;\n        const includeLowercase =\n          (document.getElementById(\"include-lowercase\") as HTMLInputElement)\n            ?.checked ?? false;\n        const includeNumbers =\n          (document.getElementById(\"include-numbers\") as HTMLInputElement)\n            ?.checked ?? false;\n        const includeSymbols =\n          (document.getElementById(\"include-symbols\") as HTMLInputElement)\n            ?.checked ?? false;\n\n        const password = generatePassword(\n          length,\n          includeUppercase,\n          includeLowercase,\n          includeNumbers,\n          includeSymbols\n        );\n        updatePasswordOutput(password);\n        const strength = evaluatePasswordStrength(password);\n        updateStrengthBars(strength);\n      }\n    });\n  }\n\n  if (copyButton) {\n    copyButton.addEventListener(\"click\", copyToClipboard);\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initializePasswordGenerator);\n"],"names":["slider","sliderValue","updateSlider","value","min","max","percentage","uppercaseChars","lowercaseChars","numberChars","symbolChars","generatePassword","length","includeUppercase","includeLowercase","includeNumbers","includeSymbols","allChars","password","i","randomIndex","evaluatePasswordStrength","strength","updateStrengthBars","strengthText","bars","config","bar","index","updatePasswordOutput","outputElement","copyToClipboard","textArea","copiedMessage","initializePasswordGenerator","generateButton","copyButton","_a","_b","_c","_d"],"mappings":"ssBAAA,MAAMA,EAAS,SAAS,eACtB,oBACF,EACMC,EAAc,SAAS,eAC3B,cACF,EAEA,SAASC,GAAqB,CACxB,GAAA,CAACF,GAAU,CAACC,EAAa,OAE7B,MAAME,EAAgB,SAASH,EAAO,MAAO,EAAE,EACzCI,EAAc,SAASJ,EAAO,IAAK,EAAE,EACrCK,EAAc,SAASL,EAAO,IAAK,EAAE,EACrCM,GAAuBH,EAAQC,IAAQC,EAAMD,GAAQ,IAE3DJ,EAAO,MAAM,WAAa,oDAAoDM,CAAU,gCAAgCA,CAAU,KACtHL,EAAA,YAAcE,EAAM,UAClC,CAEIH,IACKA,EAAA,iBAAiB,QAASE,CAAY,EAChCA,KCnBf,MAAMK,EAAiB,6BACjBC,EAAiB,6BACjBC,EAAc,aACdC,EAAc,2BAYpB,SAASC,EACPC,EACAC,EACAC,EACAC,EACAC,EACQ,CACR,IAAIC,EAAW,GAMX,GALAJ,IAA8BI,GAAAV,GAC9BO,IAA8BG,GAAAT,GAC9BO,IAA4BE,GAAAR,GAC5BO,IAA4BC,GAAAP,GAE5BO,IAAa,GAAW,MAAA,YAE5B,IAAIC,EAAW,GACf,QAASC,EAAI,EAAGA,EAAIP,EAAQO,IAAK,CAC/B,MAAMC,EAAc,KAAK,MAAM,KAAK,SAAWH,EAAS,MAAM,EAC9DC,GAAYD,EAASG,CAAW,CAClC,CAEO,OAAAF,CACT,CAYA,SAASG,EAAyBH,EAA0B,CAC1D,IAAII,EAAW,EAOX,OANAJ,EAAS,QAAU,IAAII,IACvB,QAAQ,KAAKJ,CAAQ,GAAGI,IACxB,QAAQ,KAAKJ,CAAQ,GAAGI,IACxB,QAAQ,KAAKJ,CAAQ,GAAGI,IACxB,eAAe,KAAKJ,CAAQ,GAAGI,IAE/BA,GAAY,EAAU,YACtBA,IAAa,EAAU,OACvBA,IAAa,EAAU,SACpB,QACT,CAOA,SAASC,EAAmBD,EAAwB,CAC5C,MAAAE,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAO,SAAS,iBAAiC,qBAAqB,EAExED,MAA2B,YAAcF,GASvC,MAAAI,EAPiB,CACrB,YAAa,CAAE,MAAO,mBAAoB,WAAY,CAAE,EACxD,KAAM,CAAE,MAAO,sBAAuB,WAAY,CAAE,EACpD,OAAQ,CAAE,MAAO,sBAAuB,WAAY,CAAE,EACtD,OAAQ,CAAE,MAAO,yBAA0B,WAAY,CAAE,CAAA,EAG7BJ,CAAQ,GAAK,CAAE,MAAO,GAAI,WAAY,GAO/DG,EAAA,QAAQ,CAACE,EAAKC,IAAU,CACvBD,EAAA,UAAU,OAAO,SAAU,OAAO,EACtCA,EAAI,MAAM,gBAAkB,GAExBC,EAAQF,EAAO,YACbC,EAAA,UAAU,IAAI,QAAQ,EACtBA,EAAA,MAAM,gBAAkBD,EAAO,OAE/BC,EAAA,UAAU,IAAI,OAAO,CAC3B,CACD,CACH,CAOA,SAASE,EAAqBX,EAAwB,CAC9C,MAAAY,EAAgB,SAAS,eAAe,kBAAkB,EAC5DA,IACFA,EAAc,YAAcZ,EAEhC,CAKA,SAASa,GAAwB,CACzB,MAAAD,EAAgB,SAAS,eAAe,kBAAkB,EAChE,GAAIA,EAAe,CACX,MAAAE,EAAW,SAAS,cAAc,UAAU,EACzCA,EAAA,MAAQF,EAAc,aAAe,GACrC,SAAA,KAAK,YAAYE,CAAQ,EAClCA,EAAS,OAAO,EAChB,SAAS,YAAY,MAAM,EAClB,SAAA,KAAK,YAAYA,CAAQ,EAGlC,MAAMC,EAAgB,SAAS,cAC7B,iCAAA,EAEaA,GAAA,MAAAA,EAAA,UAAU,OAAO,UAGhC,WAAW,IAAM,CACAA,GAAA,MAAAA,EAAA,UAAU,IAAI,WAC5B,GAAI,CACT,CACF,CAQA,SAASC,GAAoC,CAC3C,MAAMlC,EAAS,SAAS,eACtB,oBAAA,EAEIC,EAAc,SAAS,eAAe,cAAc,EACpDkC,EAAiB,SAAS,eAAe,mBAAmB,EAC5DC,EAAa,SAAS,eAAe,eAAe,EAEtDpC,GAAUC,IACLD,EAAA,iBAAiB,QAAS,IAAM,CACrCC,EAAY,YAAcD,EAAO,KAAA,CAClC,EAEDC,EAAY,YAAcD,EAAO,OAG/BmC,GACaA,EAAA,iBAAiB,QAAS,IAAM,aAC7C,GAAInC,EAAQ,CACV,MAAMY,EAAS,SAASZ,EAAO,MAAO,EAAE,EAClCa,IACHwB,EAAA,SAAS,eAAe,mBAAmB,IAA3C,YAAAA,EACG,UAAW,GACXvB,IACHwB,EAAA,SAAS,eAAe,mBAAmB,IAA3C,YAAAA,EACG,UAAW,GACXvB,IACHwB,EAAA,SAAS,eAAe,iBAAiB,IAAzC,YAAAA,EACG,UAAW,GACXvB,IACHwB,EAAA,SAAS,eAAe,iBAAiB,IAAzC,YAAAA,EACG,UAAW,GAEXtB,EAAWP,EACfC,EACAC,EACAC,EACAC,EACAC,CAAA,EAEFa,EAAqBX,CAAQ,EACvB,MAAAI,EAAWD,EAAyBH,CAAQ,EAClDK,EAAmBD,CAAQ,CAC7B,CAAA,CACD,EAGCc,GACSA,EAAA,iBAAiB,QAASL,CAAe,CAExD,CAEA,SAAS,iBAAiB,mBAAoBG,CAA2B"}